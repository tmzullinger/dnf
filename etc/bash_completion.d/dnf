# dnf completion                                          -*- shell-script -*-
#
# This file is part of dnf.
#
# Copyright 2013 (C) Elad Alfassa <elad@fedoraproject.org>
# Copyright 2014-2015 (C) Igor Gnatenko <i.gnatenko.brain@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA

__dnf_main_options="
    -4 -6 -b -c -C -d -e -h -q -R -v -x -y
    --advisory --advisories
    --allowerasing --assumeno
    --assumeyes
    --best --bugfix
    --bz
    --cacheonly --config
    --color --cve
    --debuglevel --debugsolver
    --disableexcludes --disableplugin
    --disableexcludepkgs --disablerepo
    --downloadonly --destdir
    --downloaddir
    --errorlevel --enableplugin
    --enablerepo --enhancement
    --exclude --excludepkgs
    --help --help-cmd
    --installroot
    --newpackage --nodocs
    --nogpgcheck --noplugins
    --noautoremove
    --obsoletes
    --quiet
    --randomwait --refresh
    --releasever --repofrompath
    --repo --repoid
    --rpmverbosity
    --sec-severity --secseverity
    --security --setopt
    --skip-broken --showduplicates
    --verbose --version
"

__dnf_history_subcmds="list info redo undo rollback userinstalled"

__dnf_python_exec=
_dnf_set_python_exec()
{
    if [[ "$( readlink /usr/bin/dnf )" == "dnf-2" ]]; then
        __dnf_python_exec="/usr/bin/python2"
    else
        if [ -x /usr/libexec/system-python ]; then
            __dnf_python_exec="/usr/libexec/system-python"
        else
            __dnf_python_exec="/usr/bin/python3"
        fi
    fi
}

_dnf_commands_helper()
{
    echo "$( ${__dnf_python_exec} -c "import sys; from dnf.cli import completion_helper as ch; ch.main(sys.argv[1:])" "$@" -d 0 -q -C 2>/dev/null )"
}

_dnf_is_path()
{
    if [[ "$1" == \.* ]] || [[ "$1" == \/* ]] || [[ "$1" == ~* ]]; then
        return 0
    else
        return 1
    fi
}

_dnf_modified_sack()
{
    local arr=( "${!1}" )
    for i in "${arr[@]}"; do
        if [[ "$i" == --installroot* ]] || [[ "$i" == --enablerepo* ]] || [[ "$i" == --disablerepo* ]]; then
            return 0
        fi
    done
    return 1
}

_dnf_get_first_command()
{
    local cmd i

    for (( i=1; i < ${#COMP_WORDS[@]}; i++ )); do
        if [[ "$1"  == *${COMP_WORDS[i]}* ]]; then
            cmd=${COMP_WORDS[i]}
            break
        fi
    done

    echo "$cmd"
}

_dnf()
{
    _dnf_set_python_exec

    local complete_commands complete_options extra_options command cmd_list
    local cur prev words cword split
    _init_completion -s || return

    cmd_list="$( _dnf_commands_helper "_cmds" "" )"
    command="$( _dnf_get_first_command "$cmd_list" )"

    case $prev in
        -h|--help|--version)
            return
            ;;
        -d|--debuglevel|-e|--errorlevel)
            COMPREPLY=( $( compgen -W '0 1 2 3 4 5 6 7 8 9 10' -- "$cur" ) )
            return
            ;;
        --installroot)
            COMPREPLY=( $( compgen -d -- "$cur" ) )
            return
            ;;
        --enablerepo)
            COMPREPLY=( $( compgen -W "$( _dnf_commands_helper repolist disabled "$cur" )" -- "$cur" ) )
            return
            ;;
        --disablerepo)
            COMPREPLY=( $( compgen -W "$( _dnf_commands_helper repolist enabled "$cur" )" -- "$cur" ) )
            return
            ;;
        *)
            ;;
    esac

    $split && return

    local cache_file="/var/cache/dnf/packages.db"
    local sqlite3="sqlite3 -batch -init /dev/null"

    case $command in
        install|update|upgrade|info)
            if ! _dnf_is_path "$cur"; then
                if [ -r $cache_file ] && ! $( _dnf_modified_sack words[@] ); then
                    COMPREPLY=( $( compgen -W '$( $sqlite3 $cache_file "select pkg from available WHERE pkg LIKE \"$cur%\"" 2>/dev/null )' ) )
                else
                    COMPREPLY=( $( compgen -W "$( _dnf_commands_helper $command "$cur" )" -- "$cur" ) )
                fi
            fi
            ext='@(rpm)'
            ;;
        erase|reinstall|remove|downgrade)
            if ! _dnf_is_path "$cur"; then
                if [ -r $cache_file ] && ! $( _dnf_modified_sack words[@] ); then
                    COMPREPLY=( $( compgen -W '$( $sqlite3 $cache_file "select pkg from installed WHERE pkg LIKE \"$cur%\"" 2>/dev/null )' ) )
                else
                    COMPREPLY=( $( compgen -W "$( _dnf_commands_helper $command "$cur" )" -- "$cur" ) )
                fi
            fi
            [[ "$command" == downgrade ]] && ext='@(rpm)' || ext='NULL'
            ;;
        list|clean)
            complete_commands="$( _dnf_commands_helper $command "$prev" "$cur" )"
            ext='NULL'
           ;;
        history)
            complete_commands="$__dnf_history_subcmds"
            ext='NULL'
            ;;
        help)
            [[ $cword -eq 3 ]] && return
            complete_commands="$( _dnf_commands_helper _cmds "$cur" )"
            ext='NULL'
            ;;
        *)
            ext='NULL'
            ;;
    esac

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
        if [[ "$ext" != "NULL" ]]; then
            _filedir $ext
            return
        fi
    fi

    case $cur in
    -*)
        complete_options="$__dnf_main_options $extra_options"
        COMPREPLY=( $(compgen -W "$complete_options" -- "$cur" ))
        ;;
    *)
        if [[ $cur == $command ]]; then
            complete_commands="$cmd_list"
        fi

        if [[ "$complete_commands" ]]; then
            COMPREPLY=( $(compgen -W "$complete_commands" -- "$cur" ))
        fi
    esac

    [[ $COMPREPLY == *= ]] && compopt -o nospace
    return 0
}

complete -F _dnf -o filenames dnf dnf-2 dnf-3
